{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\demo-project\\\\src\\\\Heading.jsx\";\n// import React from \"react\";\n// function Heading() {\n//   return <h1>That's Raveen </h1>;\n// }\n// export default Heading;\nimport React from \"react\";\n\nconst userInfoReducer = (state, action) => {\n  switch (action.type) {\n    case 'setlastname':\n      return action.payload;\n      break;\n\n    case 'setusername':\n      return action.payload;\n  }\n};\n\nexport default MyComponent = () => {\n  const [reducer, dispatch] = React.useReducer(userInfoReducer, {\n    name: \"John\",\n    lastname: \"Doe\"\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, reducer.name, \" \", reducer.lastname), /*#__PURE__*/React.createElement(EditUsername, {\n    name: reducer.name,\n    dispatch: dispatch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    value: reducer.lastname,\n    onChange: e => dispatch({\n      type: \"setlastname\",\n      payload: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }\n  }));\n};\nconst EditUsername = React.memo(props => {\n  console.log(\"Hey I'm only rerendered when name gets updated, check React.memo\");\n  return /*#__PURE__*/React.createElement(\"input\", {\n    value: props.name,\n    onChange: e => props.dispatch({\n      type: \"setusername\",\n      payload: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  });\n});","map":{"version":3,"sources":["D:/react/demo-project/src/Heading.jsx"],"names":["React","userInfoReducer","state","action","type","payload","MyComponent","reducer","dispatch","useReducer","name","lastname","e","target","value","EditUsername","memo","props","console","log"],"mappings":";AAAA;AAEA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACzC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,aAAL;AACE,aAAOD,MAAM,CAACE,OAAd;AACA;;AACF,SAAK,aAAL;AACE,aAAOF,MAAM,CAACE,OAAd;AALJ;AASD,CAVD;;AAYA,eAAeC,WAAW,GAAG,MAAM;AACjC,QAAM,CAACC,OAAD,EAAUC,QAAV,IAAsBR,KAAK,CAACS,UAAN,CAAiBR,eAAjB,EAAkC;AAC5DS,IAAAA,IAAI,EAAE,MADsD;AAE5DC,IAAAA,QAAQ,EAAE;AAFkD,GAAlC,CAA5B;AAKA,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGJ,OAAO,CAACG,IADX,OACkBH,OAAO,CAACI,QAD1B,CADF,eAIE,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAEJ,OAAO,CAACG,IAA5B;AAAkC,IAAA,QAAQ,EAAEF,QAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,eAKE;AACE,IAAA,KAAK,EAAED,OAAO,CAACI,QADjB;AAEE,IAAA,QAAQ,EAAEC,CAAC,IACTJ,QAAQ,CAAC;AACPJ,MAAAA,IAAI,EAAE,aADC;AAEPC,MAAAA,OAAO,EAAEO,CAAC,CAACC,MAAF,CAASC;AAFX,KAAD,CAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,CADF;AAiBD,CAvBD;AAyBA,MAAMC,YAAY,GAAGf,KAAK,CAACgB,IAAN,CAAWC,KAAK,IAAI;AACvCC,EAAAA,OAAO,CAACC,GAAR,CACE,kEADF;AAIA,sBACE;AACE,IAAA,KAAK,EAAEF,KAAK,CAACP,IADf;AAEE,IAAA,QAAQ,EAAEE,CAAC,IACTK,KAAK,CAACT,QAAN,CAAe;AACbJ,MAAAA,IAAI,EAAE,aADO;AAEbC,MAAAA,OAAO,EAAEO,CAAC,CAACC,MAAF,CAASC;AAFL,KAAf,CAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAWD,CAhBoB,CAArB","sourcesContent":["// import React from \"react\";\r\n\r\n// function Heading() {\r\n//   return <h1>That's Raveen </h1>;\r\n// }\r\n// export default Heading;\r\n\r\nimport React from \"react\";\r\n\r\nconst userInfoReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'setlastname':\r\n      return action.payload;\r\n      break;\r\n    case 'setusername':\r\n      return action.payload;\r\n\r\n\r\n  }\r\n};\r\n\r\nexport default MyComponent = () => {\r\n  const [reducer, dispatch] = React.useReducer(userInfoReducer, {\r\n    name: \"John\",\r\n    lastname: \"Doe\"\r\n  });\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <h3>\r\n        {reducer.name} {reducer.lastname}\r\n      </h3>\r\n      <EditUsername name={reducer.name} dispatch={dispatch} />\r\n      <input\r\n        value={reducer.lastname}\r\n        onChange={e =>\r\n          dispatch({\r\n            type: \"setlastname\",\r\n            payload: e.target.value\r\n          })\r\n        }\r\n      />\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst EditUsername = React.memo(props => {\r\n  console.log(\r\n    \"Hey I'm only rerendered when name gets updated, check React.memo\"\r\n  );\r\n\r\n  return (\r\n    <input\r\n      value={props.name}\r\n      onChange={e =>\r\n        props.dispatch({\r\n          type: \"setusername\",\r\n          payload: e.target.value\r\n        })\r\n      }\r\n    />\r\n  );\r\n});\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}