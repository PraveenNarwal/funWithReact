{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\demo-project\\\\src\\\\First.jsx\";\nimport React from 'react';\nimport { useMemo, useState } from \"react\";\n/*\r\n    1. Create a \"input\" with type=\"number\" and with class=\"number\".\r\n    2. on change \"input\", update inputVal state (you can find this in code).\r\n    3. Create a \"button\" with text \"Get Result\".\r\n    4. on Click that button update number state with value equal to inputVal.\r\n    5. Create a \"div\" with class=\"result\" which should print result.\r\n\r\nUse useMemo hook to prevent re calculation on result.\r\n*/\n\nfunction First() {\n  const [number, setNumber] = useState(0);\n  const [inputVal, setInputVal] = useState(0); // use useMemo hook for multiplier which should re calculate only if number changes\n\n  const result = useMemo(function multiplier() {\n    console.log(\"called\");\n    return number * 10;\n  });\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"number\",\n    onChange: e => setInputVal(e.target.value),\n    className: \"number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setNumber(inputVal),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }\n  }, \"Get Result \", number), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"result\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }, \" \", result));\n}\n\n;\nexport default First;","map":{"version":3,"sources":["D:/react/demo-project/src/First.jsx"],"names":["React","useMemo","useState","First","number","setNumber","inputVal","setInputVal","result","multiplier","console","log","e","target","value"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,OAAT,EAAkBC,QAAlB,QAAkC,OAAlC;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,KAAT,GAAiB;AACb,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBH,QAAQ,CAAC,CAAD,CAApC;AACA,QAAM,CAACI,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,CAAD,CAAxC,CAFa,CAGb;;AACA,QAAMM,MAAM,GAAGP,OAAO,CAAC,SAASQ,UAAT,GAAsB;AACzCC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,WAAOP,MAAM,GAAG,EAAhB;AACH,GAHqB,CAAtB;AAOA,sBACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,QAAQ,EAAGQ,CAAD,IAAOL,WAAW,CAACK,CAAC,CAACC,MAAF,CAASC,KAAV,CAAjD;AAAmE,IAAA,SAAS,EAAC,QAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,eAGI;AAAQ,IAAA,OAAO,EAAE,MAAMT,SAAS,CAACC,QAAD,CAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAwDF,MAAxD,CAHJ,eAII;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA0BI,MAA1B,CAJJ,CADJ;AAQH;;AAAA;AACD,eAAeL,KAAf","sourcesContent":["import React from 'react'\r\n\r\nimport { useMemo, useState } from \"react\";\r\n\r\n\r\n/*\r\n    1. Create a \"input\" with type=\"number\" and with class=\"number\".\r\n    2. on change \"input\", update inputVal state (you can find this in code).\r\n    3. Create a \"button\" with text \"Get Result\".\r\n    4. on Click that button update number state with value equal to inputVal.\r\n    5. Create a \"div\" with class=\"result\" which should print result.\r\n\r\nUse useMemo hook to prevent re calculation on result.\r\n*/\r\n\r\nfunction First() {\r\n    const [number, setNumber] = useState(0);\r\n    const [inputVal, setInputVal] = useState(0);\r\n    // use useMemo hook for multiplier which should re calculate only if number changes\r\n    const result = useMemo(function multiplier() {\r\n        console.log(\"called\");\r\n        return number * 10;\r\n    });\r\n\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {/* write your code here */}\r\n            <input type=\"number\" onChange={(e) => setInputVal(e.target.value)} className=\"number\" />\r\n            <button onClick={() => setNumber(inputVal)}>Get Result {number}</button>\r\n            <div className=\"result\"> {result}</div>\r\n        </React.Fragment>\r\n    );\r\n};\r\nexport default First\r\n"]},"metadata":{},"sourceType":"module"}