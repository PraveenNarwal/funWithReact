{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\demo-project\\\\src\\\\Fcsone.jsx\";\nimport React from 'react';\n\nfunction Fcsone() {\n  const [formData, setFormData] = useState({});\n  const [error, setError] = useState({\n    email: false,\n    password: false\n  });\n\n  function isValidEmail(val) {\n    const validEmailRegEx = /^[A-Z0-9_'%=+!`#~$*?^{}&|-]+([.][A-Z0-9_'%=+!`#~$*?^{}&|-]+)*@[A-Z0-9-]+(.[A-Z0-9-]+)+$/i;\n\n    if (validEmailRegEx.test(val)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function isValidPassword(val) {\n    const validPasswordRegEx = /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[^\\w\\s]).{8,}$/;\n\n    if (validPasswordRegEx.test(val)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function handleChange(event) {\n    let name = event.target.name;\n    let value = event.target.value;\n\n    if (name === \"email\" && !isValidEmail(value)) {\n      setError({ ...error,\n        [name]: true,\n        msg: \"Invalid Email!\"\n      });\n      return;\n    } else if (name === \"password\" && !isValidPassword(value)) {\n      setError({ ...error,\n        [name]: true,\n        msg: \"At least 8 charater, with 1 uppercase, 1 lowercase, 1 numeric and 1 special caracter\"\n      });\n      return;\n    } else {\n      setError({ ...error,\n        [name]: false,\n        msg: \"\"\n      });\n    }\n\n    setFormData({ ...formData,\n      [name]: value\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"res-fullname\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    className: \"fullname\",\n    name: \"fullname\",\n    label: \"Full Name\",\n    helperText: \"\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 21\n    }\n  }), name.value, \" \"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"res-email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }\n  }, \"  \", /*#__PURE__*/React.createElement(TextField, {\n    className: \"email\",\n    name: \"email\",\n    label: \"Email\",\n    helperText: error.email ? error.msg : \"\",\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 46\n    }\n  }), setFormData, \" \"), /*#__PURE__*/React.createElement(TextField, {\n    type: \"password\",\n    className: \"password\",\n    name: \"password\",\n    label: \"Password\",\n    helperText: error.password ? error.msg : \"\",\n    error: error.password,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  })));\n}\n\n;\nexport default Fcsone;\n/*\r\nWrap the below content in \"form\" element\r\n    1. Create a \"TextField\" which is already inported from Material UI with following attributes:\r\n        a. class=\"fullname\".\r\n        b. name=\"fullname\".\r\n        c. label=\"Full Name\"\r\n        d. helperText=\"\"\r\n        e. onChange trigger \"handleChange\" function\r\n          <TextField className=\"fullname\" name=\"fullname\" label=\"Full Name\"  helperText=\"\"  onChange={handleChange}/>\r\n\r\n    2. Create a \"TextField\" with following attributes:\r\n        a. error={error.email}\r\n        b. class=\"email\"\r\n        c. name=\"email\"\r\n        d. label=\"Email\"\r\n        e. helperText={error.email ? error.msg : \"\"}\r\n        f. onChange trigger \"handleChange\" function\r\n\r\n    3. Create a \"TextField\" with following attributes:\r\n        a. error={error.password}\r\n        b. class=\"password\"\r\n        c. name=\"password\"\r\n        d. label=\"Password\"\r\n        e. helperText={error.password ? error.msg : \"\"}\r\n        f. type=\"password\"\r\n        g. onChange trigger \"handleChange\" functio\r\n\r\nWe need to display form data in real-time to make sure that we are storing form data.\r\n\r\nWrap the following content in \"div\" with class=\"container\"\r\n    1. Create a \"div\" with class=\"res-fullname\" which should render fullname.\r\n    2. Create a \"div\" with class=\"res-email\" which should render email.\r\n\r\n*/","map":{"version":3,"sources":["D:/react/demo-project/src/Fcsone.jsx"],"names":["React","Fcsone","formData","setFormData","useState","error","setError","email","password","isValidEmail","val","validEmailRegEx","test","isValidPassword","validPasswordRegEx","handleChange","event","name","target","value","msg"],"mappings":"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","sourcesContent":["import React from 'react'\r\n\r\nfunction Fcsone() {\r\n    const [formData, setFormData] = useState({});\r\n    const [error, setError] = useState({ email: false, password: false });\r\n\r\n    function isValidEmail(val) {\r\n        const validEmailRegEx = /^[A-Z0-9_'%=+!`#~$*?^{}&|-]+([.][A-Z0-9_'%=+!`#~$*?^{}&|-]+)*@[A-Z0-9-]+(.[A-Z0-9-]+)+$/i;\r\n        if (validEmailRegEx.test(val)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function isValidPassword(val) {\r\n        const validPasswordRegEx = /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[^\\w\\s]).{8,}$/;\r\n        if (validPasswordRegEx.test(val)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    function handleChange(event) {\r\n        let name = event.target.name;\r\n        let value = event.target.value;\r\n\r\n        if (name === \"email\" && !isValidEmail(value)) {\r\n            setError({ ...error, [name]: true, msg: \"Invalid Email!\" });\r\n            return;\r\n        } else if (name === \"password\" && !isValidPassword(value)) {\r\n            setError({\r\n                ...error,\r\n                [name]: true,\r\n                msg:\r\n                    \"At least 8 charater, with 1 uppercase, 1 lowercase, 1 numeric and 1 special caracter\",\r\n            });\r\n            return;\r\n        } else {\r\n            setError({ ...error, [name]: false, msg: \"\" });\r\n        }\r\n        setFormData({ ...formData, [name]: value });\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {/* write your code here */}\r\n            <div className=\"container\">\r\n                <div className=\"res-fullname\">\r\n                    <TextField className=\"fullname\" name=\"fullname\" label=\"Full Name\" helperText=\"\" onChange={handleChange} />\r\n                    {name.value} </div>\r\n                <div className=\"res-email\">  <TextField className=\"email\" name=\"email\" label=\"Email\" helperText={error.email ? error.msg : \"\"} onChange={handleChange} />\r\n                    {setFormData} </div>\r\n                <TextField type=\"password\" className=\"password\" name=\"password\" label=\"Password\" helperText={error.password ? error.msg : \"\"} error={error.password} onChange={handleChange} />\r\n\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Fcsone\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\nWrap the below content in \"form\" element\r\n    1. Create a \"TextField\" which is already inported from Material UI with following attributes:\r\n        a. class=\"fullname\".\r\n        b. name=\"fullname\".\r\n        c. label=\"Full Name\"\r\n        d. helperText=\"\"\r\n        e. onChange trigger \"handleChange\" function\r\n          <TextField className=\"fullname\" name=\"fullname\" label=\"Full Name\"  helperText=\"\"  onChange={handleChange}/>\r\n\r\n    2. Create a \"TextField\" with following attributes:\r\n        a. error={error.email}\r\n        b. class=\"email\"\r\n        c. name=\"email\"\r\n        d. label=\"Email\"\r\n        e. helperText={error.email ? error.msg : \"\"}\r\n        f. onChange trigger \"handleChange\" function\r\n\r\n    3. Create a \"TextField\" with following attributes:\r\n        a. error={error.password}\r\n        b. class=\"password\"\r\n        c. name=\"password\"\r\n        d. label=\"Password\"\r\n        e. helperText={error.password ? error.msg : \"\"}\r\n        f. type=\"password\"\r\n        g. onChange trigger \"handleChange\" functio\r\n\r\nWe need to display form data in real-time to make sure that we are storing form data.\r\n\r\nWrap the following content in \"div\" with class=\"container\"\r\n    1. Create a \"div\" with class=\"res-fullname\" which should render fullname.\r\n    2. Create a \"div\" with class=\"res-email\" which should render email.\r\n\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}